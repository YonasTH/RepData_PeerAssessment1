## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//response/row",xmlValue)
head(zip)
str(doc)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <-xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternal=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row//zipcode",xmlValue)
length(zip[zip==21231])
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
head(zip)
zip[2]
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- htmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row[@zipcode=21231]",xmlValue)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row[@zipcode='21231']",xmlValue)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row[@zipcode='21213']",xmlValue)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
Zip_21231 <- zip[zip==21231]
nrow(zip_21231)
ncol(zip_21231)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
Zip_21231 <- length(zip[zip==21231])
zip_21231
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
zip_21231 <- zip[zip==21231]
nrow(zip_21231)
ncol(zip_21231)
head(zip_21231)
ncols(zip_21231)
length(zip_21231)
str(zip)
str(zip_21231)
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row[@zipcode=21231]",xmlValue)
zip_21231 <- zip[zip==21231]
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
zip_21231 <- zip[zip==21231])
library(XML)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml")
doc <- xmlTreeParse("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Baltimore.xml", useInternalNodes=TRUE)
## using the https path in the above line wouldn't work because https connections are not supported in xmlParse
## it can be local file name, ftp or http. Thus the need to download the file first and then xmlTreeParse
zip <- xpathSApply(doc, "//row/zipcode",xmlValue)
zip_21231 <- zip[zip==21231]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfil="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\IdahoHousing.csv")
data<-read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\IdahoHousing.csv")
# head(data) to see what the data contains
CompleteData <- data[complete.cases(data$VAL),]
HighWorth<-CompleteData[CompleteData$VAL==24,] # number of houses worth 1,000,000 or more
rows <- nrow(HighWorth)
head(CompleteDAta)
head(CompleteData)
getwd()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\acs.csv")
acs_data <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\acs.csv")
head(acs_data, n=3)
str(acs_data)
summarize(acs_datqa)
summarize(acs_data)
summary(acs_data)
clear()
q
acs_data <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\acs.csv")
agricultureLogical <-(acs_data$acr==3 & acs_data$ags==6)
head(acs_data[which(agricultureLogical),], n=3)
agricultureLogical <-(acs_data$acr==3 & acs_data$ags==6)
agricultureLogical = acs_data$acr==3 & acs_data$ags==6
acs_data[which(acs_data$acr==3 & acs_data$ags==6),]
agricultureLogical <- (acs_data$ACR==3 & acs_data$AGS==6)
acs_data[which(agricultureLogical),]
head(acs_data[which(agricultureLogical),], n=3)
agricultureLogical <- (acs_data$ACR==3 & acs_data$AGS==6)
head(acs_data[which(agricultureLogical),], n=3)
?jpeg
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg")
jeff <- readJPEG("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg", native=TRUE) #native=TRUE reads it as raster rather than array
quantiles(jeff,na.rm = TRUE, probs=c(0.3.0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg")
jeff <- readJPEG("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg", native=TRUE) #native=TRUE reads it as raster rather than array
quantiles(jeff,na.rm = TRUE, probs=c(0.3,0.8))
?quantile
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg")
jeff <- readJPEG("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg", native=TRUE) #native=TRUE reads it as raster rather than array
quantile(jeff,na.rm = TRUE, probs=c(0.3,0.8))
?jpeg
library(jpeg)
library(jpg)
install.packages("jpeg")
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg")
jeff <- readJPEG("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg", native=TRUE) #native=TRUE reads it as raster rather than array
quantile(jeff,na.rm = TRUE, probs=c(0.3,0.8))
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg")
jeff <- readJPEG("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg", native=TRUE) #native=TRUE reads it as raster rather than array
quantile(jeff,na.rm = TRUE, probs=c(0.3,0.8))
v
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg")
jeff <- readJPEG("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg", native=TRUE) #native=TRUE reads it as raster rather than array
quantile(jeff, probs=c(0.3,0.8))
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg")
jeff <- readJPEG("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg", native=TRUE) #native=TRUE reads it as raster rather than array
quantile(jeff, probs=c(0.7,0.2))
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg")
jeff <- readJPEG("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg", native=TRUE, mode="wb")
#native=TRUE reads it as raster rather than array
#images like excel files are binary, so mode is set to "wb" to correctly read the image
quantile(jeff, probs=c(0.3,0.8))
?readJPEG
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg", mode="wb")
jeff <- readJPEG("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\jeff.jpg", native=TRUE)
#native=TRUE reads it as raster rather than array
#images like excel files are binary, so they should be downloaded in "wb" mode
#with out setting binary mode, the quantiles calculated give wrong result
quantile(jeff, probs=c(0.3,0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
names(GDP)
names(Education)
head(GDP)
head(Educagtion)
head(Education)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "X", by.y="CountryCode", all=FALSE # data reported only where the id's match)
nrow(merged)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "X", by.y="CountryCode", all=FALSE # data reported only where the id's match)
nrows(merged)
?rows
?row
?nrow
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "X", by.y="CountryCode", all=FALSE # data reported only where the id's match)
nrow(merged)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "X", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
head(merged)
summary(merged)
str(merged)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "X", by.y="CountryCode", all=TRUE) # data reported only where the id's match
nrow(merged)
head(GDP)
head(merged)
?read.csv
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.table("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190)
#read as table coz we want to skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "X", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
head(GDP)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.table("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190)
#read as table coz we want to skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "v1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
head(GDP)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.table("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190)
#read as table coz we want to skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.table("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190)
#read as table coz we want to skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=TRUE) # data reported only where the id's match
nrow(merged)
tail(GDP)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=TRUE) # data reported only where the id's match
nrow(merged)
head(GDP)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190, header=FALSE)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=TRUE) # data reported only where the id's match
nrow(merged)
head(GDP)
tail(GDP)
head(Education)
tail(Education)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190, header=FALSE)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
head(merged)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190, header=FALSE)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
sort(GDP$V2, decreasing=TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190, header=FALSE)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
merged[sort(GDP$V2, decreasing=TRUE),]
?sort
sort(GDP$V2, decreasing=TRUE)
head(merged)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190, header=FALSE)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
merged[sort(merged$V2, decreasing=TRUE),]
head(GDP)
sort(merged$V2, decreasing=TRUE)
merged[order(merged$V2, decreasing=TRUE),]
order(merged$V2, decreasing=TRUE)
merged[with(merged, order(-V2) )]
merged[with(merged, order(-merged$V2) )]
merged[with(merged, order(merged$V2, decreasing=TRUE) )]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190, header=FALSE)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
oredred <- merged[order(merged$V2, decreasing=TRUE),]
ordered[13,2]
head(ordered)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190, header=FALSE)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
ordedred <- merged[order(merged$V2, decreasing=TRUE),]
ordered[13,2]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190, header=FALSE)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
ordered <- merged[order(merged$V2, decreasing=TRUE),]
ordered[13,2]
View(ordered)
ordered[1,]
O1<-ordered[1,]
View(`O1`)
View(ordedred)
ordered[13,]
view(ordered[13,])
View(ordered[13,])
View(ordered[13,2])
View(ordered)
View(oredred)
ordered[13,ordered$V1]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190, header=FALSE)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
ordered <- merged[order(merged$V2, decreasing=TRUE),]
ordered[13,ordered$V1]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv ", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv")
GDP <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\GDP.csv",sep=",", skip=5, nrow=190, header=FALSE)
#skip unncessary rows
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile="C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
Education <- read.csv("C:\\Users\\yhabt001\\Documents\\coursera\\Getting and cleaning data\\Quiz 3\\Education.csv")
# match the data based on the country's short code(column x in GDP CountryCode in Education)
merged <- merge(GDP, Education, by.x = "V1", by.y="CountryCode", all=FALSE) # data reported only where the id's match
nrow(merged)
ordered <- merged[order(merged$V2, decreasing=TRUE),]
ordered[13,1]
View(ordered)
head(GDP)
head(Education)
names(merged)
merged$Income.Group
mean(merged[merged$Income.Group=='High income: OECD',]$V2)
mean(merged[merged$Income.Group=='Hidh income: nonOECD']$V2)
mean(merged[merged$Income.Group=='High income: OECD',]$V2, na.rm =TRUE)
mean(merged[merged$Income.Group=='Hidh income: nonOECD']$V2, na.rm = TRUE)
mean(merged[merged$Income.Group=='High income: OECD',]$V2, na.rm =TRUE)
mean(merged[merged$Income.Group=='High income: nonOECD']$V2, na.rm = TRUE)
mean(merged[merged$Income.Group=='High income: OECD',]$V2, na.rm =TRUE)
mean(merged[merged$Income.Group=='High income: nonOECD',]$V2, na.rm = TRUE)
names(merged)
head(merged)
quantile(merged$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
merged$gdp=cut2(merged$V5,g=5)
table(merged$Income.Group,merged$gdp)
install.packages("Hmisc")
quantile(merged$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
merged$gdp=cut2(merged$V5,g=5)
table(merged$Income.Group,merged$gdp)
quantile(merged$Gross.domestic.product.2012,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
merged_gdp=cut2(merged$V5,g=5)
table(merged$Income.Group,merged_gdp)
quantile(merged$V5,probs=c(0.2,0.4,0.6,0.8,1))
library(Hmisc)
merged_gdp=cut2(merged$V5,g=5)
table(merged$Income.Group,merged_gdp)
q <- quantile(merged$V2, c(0.2,0.4,0.6,0.8,1))
View(q)
View(q)
q <- quantile(merged$V2, c(0.2,0.4,0.6,0.8,1))
q1 <- merged$V2 <= 38
xtabs(q1 ~ merged$Income.Group)
View(q1)
View(q)
?xtabs
head(merged$V2)
merged$V2
head(merged)
q1 <- merged$V2 <= 38
xtabs(q1 ~ merged$Income.Group)
q1
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("ggplot2")
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
?transform
library(ggplot2)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
?transform
getwd()
setwd("..")
getwd()
source('~/.active-rstudio-document', echo=TRUE)
opts_chunk$set(echo=TRUE, results='show')
activity <- read.csv(unzip("RepData_PeerAssessment1/activity.zip", exdir="."))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getwd
getwd()
setwd("RepData_PeerAssessment1")
getwd()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getwd()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getwd()
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
